extends base

block content

  h1.headerStyle Scaffolding and Layout

  h2 Normalize

  p To begin, Normalize is used to get a consistent base for each
    | element before any styling begins. To learn more about Normalize, go here-
    a(href='http://necolas.github.io/normalize.css/')  normalize.css.

  p The Normalize file is kept in a _normailze.scss file.

  p Normalize is a great start but there's a few more elements that needed to be added
    | to the code in the normalize file. First, add these two delcarations to the "a"
    | selector:

  pre
    code.language-css.
      a {
      color: inherit;
      text-decoration: none;
      }

  p Then add the following code to normalize lists:

  pre
    code.language-css.
      ul, ol {
        list-style-type: none;
      }

  p Normalize is now set up! Moving on to the grid system for Gilt...

  h2 Grid System

  p Neat is the grid system used for Gilt's website. It's a grid that can be used in
    | Sass so it keeps the HTML a little cleaner. To learn more about Neat and how it is used check out
    a(href='http://neat.bourbon.io/')  neat's site.

  p To apply grid styling first an outer-container must be set and then the appropriately number of span-columns should be added to that element or class.
    | For example:

    pre
      code.language-css.
        .grid-container {
          @include outer-container(100%);
        }

        grid1 {
          @include span-columns(1);
        }

        .grid2 {
          @include span-columns(2);
        }

        .grid3 {
          @include span-columns(3);
        }

  p The results of the above code, plus the other 9 columns, would render like this:

    ul.grid-container

      li.grid1.nonFloat 1

      li.grid2.nonFloat 2

      li.grid3.nonFloat 3

      li.grid4.nonFloat 4

      li.grid5.nonFloat 5

      li.grid6.nonFloat 6

      li.grid7.nonFloat 7

      li.grid8.nonFloat 8

      li.grid9.nonFloat 9

      li.grid10.nonFloat 10

      li.grid11.nonFloat 11

      li.grid12.nonFloat 12

  p There will cases where some elements need to be nested inside other grid elements. To
    | do this simply include the number of columns within a column the element should take up.
    | For example:

    pre
      code.language-css.
        .grid-container {
          @include outer-container(100%);
        }

        .grid3 {
          @include span-columns(3);
        }

        .smallgrid1 {
          @include span-columns(1 of 3);
        }

    p Which would render like this:

    ul.grid-container

      li.grid3

        div.smallgrid1 1/3

        div.smallgrid1 1/3

        div.smallgrid1 1/3

      li.grid3

        div.smallgrid1 1/3

        div.smallgrid1 1/3

        div.smallgrid1 1/3

      li.grid3

        div.smallgrid1 1/3

        div.smallgrid1 1/3

        div.smallgrid1 1/3

    p The last important note about the grid system for Gilt is how to shift the content over if not everything should be floated
      | left. Neat allows this by shifting columns over. An example:

    pre
      code.language-css.

        .grid-container {
          @include outer-container(100%);
        }

        .grid4shift1 {
          @include span-columns(4);
          @include shift(1 of 12);
        }

        .grid4shift2 {
          @include span-columns(4);
          @include shift(2 of 12);
        }

        .grid4shift3 {
          @include span-columns(4);
          @include shift(3 of 12);
        }

        .grid4shift4 {
          @include span-columns(4);
          @include shift(4 of 12);
        }

    p Renders as:

    ul.grid-container

      li.grid4shift1.nonFloat Shifted over 1

      li.grid4shift2.nonFloat Shifted over 2

      li.grid4shift3.nonFloat Shifted over 3

      li.grid4shift4.nonFloat Shifted over 4

  p Note that in some cases a "nonFLoat" class is added to the elements, depending
    | on the situation, because Neat includes a {float: left} in it's code.

  p That's it for scaffolding and layout!




















